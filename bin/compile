#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# config
APACHE_VERSION="2.4.3"
APACHE_PATH="apache"
PHP_VERSION="5.3.17"
PHP_PATH="php"

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

PACKAGES_URL="https://github.com/gboudreau/heroku-buildpack-php-packages/tarball/master"
echo "-----> Downloading Apache and PHP packages"
curl --output heroku-buildpack-php.tar.gz --silent --max-time 60 --location $PACKAGES_URL
tar zxf heroku-buildpack-php.tar.gz && rm heroku-buildpack-php.tar.gz
mv *heroku-buildpack-php-packages*/* .
rm -rf *heroku-buildpack-php-packages*

echo "-----> Bundling Apache version $APACHE_VERSION"
tar xjf apache-$APACHE_VERSION.tar.bz2 && rm apache-$APACHE_VERSION.tar.bz2

echo "-----> Bundling PHP version $PHP_VERSION"
tar xjf php-$PHP_VERSION.tar.bz2 && rm php-$PHP_VERSION.tar.bz2

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $LP_DIR/conf/php.ini php

# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

cat >>boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/ext
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR/*

# fakesu
mktmpdir() {
  dir=$(mktemp -t fakesu-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

DEBOOTSTRAP_BUILD="$(mktmpdir debootstrap)"
FAKECHROOT_BUILD="$(mktmpdir fakechroot)"

mkdir -p $BUILD_DIR/.tools/fakechroot
mkdir -p $CACHE_DIR/.tools/debootstrap

export PATH=/sbin:/usr/sbin:$PATH:$CACHE_DIR/.tools/debootstrap/usr/sbin:$BUILD_DIR/.tools/fakechroot/sbin:$BUILD_DIR/.tools/fakechroot/bin
export DEBOOTSTRAP_DIR=$CACHE_DIR/.tools/debootstrap/usr/share/debootstrap

echo "-----> Fetching and installing debootstrap"
cd $DEBOOTSTRAP_BUILD
latest_file=`curl -s 'http://archive.ubuntu.com/ubuntu/pool/main/d/debootstrap/' | grep .tar.gz | tail -n 1 | awk -F'"' '{print $8}'`
curl -sO "http://archive.ubuntu.com/ubuntu/pool/main/d/debootstrap/$latest_file"
tar zxf $latest_file
cd debootstrap*
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make >/dev/null
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make install >/dev/null
echo "debootstrap installed"

echo "-----> Fetching, installing and vendoring fakechroot into /app/.tools/fakechroot/"
cd $FAKECHROOT_BUILD
git clone git://github.com/fabiokung/fakechroot.git >/dev/null
cd fakechroot
./autogen.sh >/dev/null 2>&1
./configure --prefix=$BUILD_DIR/.tools/fakechroot >/dev/null
make >/dev/null
make install >/dev/null
echo "fakechroot vendored"

cd $LP_DIR
echo "-----> Bootstraping a new base ubuntu lucid into /app/.root/"
mkdir -p $BUILD_DIR/.root
fakechroot -s fakeroot debootstrap --no-check-gpg --variant=fakechroot lucid $BUILD_DIR/.root >/dev/null
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get install -y --force-yes gpgv >/dev/null 2>&1
echo "/app/.root bootstraped"

sed -i -e "s/#force_color_prompt=yes/force_color_prompt=yes/" $BUILD_DIR/.root/root/.bashrc
echo "export PATH=/sbin:/usr/sbin:\$PATH" >> $BUILD_DIR/.root/root/.bashrc
echo "cd $HOME" >> $BUILD_DIR/.root/root/.bashrc

echo "-----> Updating packages"
fakechroot fakeroot chroot $BUILD_DIR/.root bash -c "cat > /etc/apt/sources.list <<EOF
deb http://archive.ubuntu.com/ubuntu lucid main universe
deb http://archive.ubuntu.com/ubuntu lucid-security main
deb http://archive.ubuntu.com/ubuntu lucid-updates main
EOF"
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get update >/dev/null
echo "packages updated"

cd $BUILD_DIR/.root
ln -s ../ app

mkdir -p $BUILD_DIR/bin
cp $LP_DIR/bin/fakesu $BUILD_DIR/bin
